{"version":3,"sources":["contexts/DateContext.js","components/Notes/emojiMenu.js","components/Notes/Notes.js","components/Notes/createList.js","components/DatePage/DatePage.js","components/DiaryHeader/DiaryHeader.js","components/DateList/DateList.js","contexts/ListContext.js","components/DatePanel/DatePanel.js","components/FirstPage/FirstPage.js","App.js","serviceWorker.js","index.js"],"names":["DateContext","React","createContext","currentDate","selectedDate","setDate","notesArray","changeNotesArray","library","add","faAngry","faDizzy","faFrown","faGrinBeam","faGrin","faFlushed","faFrownOpen","faGrimace","faGrinAlt","faGrinBeamSweat","faGrinHearts","faGrinSquint","faGrinSquintTears","faGrinStars","faGrinTears","faGrinTongue","faGrinTongueSquint","faGrinTongueWink","faGrinWink","faKiss","faKissBeam","faKissWinkHeart","faLaugh","faMeh","faMehBlank","faMehRollingEyes","faSadCry","faSadTear","faSmile","faSmileBeam","faSmileWink","faSurprise","faTired","faLaughBeam","faLaughSquint","faLaughWink","emojisArray","Notes","date","TextArea","Input","useState","textAreaValue","saveTextAreaValue","selectedMood","setMood","notesContext","useContext","actualNotesArray","filter","note","moment","noteDate","format","useCallback","listArray","itemLayout","dataSource","renderItem","item","idx","Item","Meta","description","span","noteText","type","size","onClick","array","includes","indexOf","createList","name","placeholder","onChange","event","target","value","rows","overlay","className","map","emoji","key","icon","color","placement","noteMood","DatePage","dateToShow","isHidden","toggleVisibility","classNames","require","notesClassNames","toggleButtonClassNames","useEffect","message","DiaryHeader","dateContext","toDate","DateList","visibility","callback","setPosition","listStyle","position","selectedItem","isChildVisible","listClassName","filteredListArray","el","arr","slice","style","top","window","pageYOffset","closest","getBoundingClientRect","ListContext","isMonthVisible","toggleMonthVisible","isDaysVisible","toggleDaysVisible","selectedYear","setYear","selectedMonth","setMonth","monthPosition","setMonthPosition","daysPosition","setDaysPosition","DatePanel","yearsContext","listContext","yearsArray","sort","note1","note2","parseFloat","monthArray","daysArray","length","FirstPage","currentTime","getCurrentTime","time","setInterval","clearInterval","Provider","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f626ca0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const DateContext = React.createContext(\r\n    {\r\n        currentDate: '',\r\n        selectedDate: '',\r\n        setDate: () => {},\r\n        notesArray: [],\r\n        changeNotesArray: () => {},        \r\n    }\r\n)","import React from 'react';\r\nimport { Menu } from 'antd';\r\nimport './Notes.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fas } from '@fortawesome/free-solid-svg-icons'\r\nimport {\r\n    far,\r\n    faAngry,\r\n    faDizzy,\r\n    faFrown,\r\n    faGrinBeam,\r\n    faGrin,\r\n    faFlushed,\r\n    faFrownOpen,\r\n    faGrimace,\r\n    faGrinAlt,\r\n    faGrinBeamSweat,\r\n    faGrinHearts,\r\n    faGrinSquint,\r\n    faGrinSquintTears,\r\n    faGrinStars,\r\n    faGrinTears,\r\n    faGrinTongue,\r\n    faGrinTongueSquint,\r\n    faGrinTongueWink,\r\n    faGrinWink,\r\n    faKiss,\r\n    faKissBeam,\r\n    faKissWinkHeart,\r\n    faLaugh,\r\n    faMeh,\r\n    faMehBlank,\r\n    faMehRollingEyes,\r\n    faSadCry,\r\n    faSadTear,\r\n    faSmile,\r\n    faSmileBeam,\r\n    faSmileWink,\r\n    faSurprise,\r\n    faTired,\r\n    faLaughBeam,\r\n    faLaughSquint,\r\n    faLaughWink\r\n} from '@fortawesome/free-regular-svg-icons'\r\n\r\nlibrary.add(\r\n    faAngry,\r\n    faDizzy,\r\n    faFrown,\r\n    faGrinBeam,\r\n    faGrin,\r\n    faFlushed,\r\n    faFrownOpen,\r\n    faGrimace,\r\n    faGrinAlt,\r\n    faGrinBeamSweat,\r\n    faGrinHearts,\r\n    faGrinSquint,\r\n    faGrinSquintTears,\r\n    faGrinStars,\r\n    faGrinTears,\r\n    faGrinTongue,\r\n    faGrinTongueSquint,\r\n    faGrinTongueWink,\r\n    faGrinWink,\r\n    faKiss,\r\n    faKissBeam,\r\n    faKissWinkHeart,\r\n    faLaugh,\r\n    faMeh,\r\n    faMehBlank,\r\n    faMehRollingEyes,\r\n    faSadCry,\r\n    faSadTear,\r\n    faSmile,\r\n    faSmileBeam,\r\n    faSmileWink,\r\n    faSurprise,\r\n    faTired,\r\n    faLaughBeam,\r\n    faLaughSquint,\r\n    faLaughWink\r\n)\r\n\r\nexport const emojisArray = [ 'angry',\r\n    'dizzy',\r\n    'frown',\r\n    'grin-beam',\r\n    'grin',\r\n    'flushed',\r\n    'frown-open',\r\n    'grimace',\r\n    'grin-alt',\r\n    'grin-beam-sweat',\r\n    'grin-hearts',\r\n    'grin-squint',\r\n    'grin-squint-tears',\r\n    'grin-stars',\r\n    'grin-tears',\r\n    'grin-tongue',\r\n    'grin-tongue-squint',\r\n    'grin-tongue-wink',\r\n    'grin-wink',\r\n    'kiss',\r\n    'kiss-beam',\r\n    'kiss-wink-heart',\r\n    'laugh',\r\n    'laugh-beam',\r\n    'laugh-squint',\r\n    'laugh-wink',\r\n    'meh',\r\n    'meh-blank',\r\n    'meh-rolling-eyes',\r\n    'sad-cry',\r\n    'sad-tear',\r\n    'smile',\r\n    'smile-beam',\r\n    'smile-wink',\r\n    'surprise',\r\n    'tired',\r\n]\r\n","import React, { useState, useContext, useCallback, useMemo } from 'react';\r\nimport './Notes.css';\r\nimport { Input, Row, Button, List, Col, Dropdown, Menu, Item, Icon } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { DateContext } from '../../contexts/DateContext';\r\nimport moment from 'moment';\r\nimport { emojisArray } from './emojiMenu';\r\nimport { createList } from './createList';\r\n\r\nconst Notes = ({ date }) => {\r\n    const { TextArea } = Input\r\n    const [textAreaValue, saveTextAreaValue] = useState('')\r\n    const [selectedMood, setMood] = useState(null)\r\n    const notesContext = useContext(DateContext)\r\n    const { notesArray, changeNotesArray } = notesContext\r\n    const actualNotesArray = notesArray\r\n        .filter(note => moment(note.noteDate).format('LL') === moment(date).format('LL'))\r\n    const memoizedCreateList = useCallback(() => createList(actualNotesArray, changeNotesArray),\r\n        [actualNotesArray, changeNotesArray]\r\n    )\r\n    \r\n    return (\r\n        <>\r\n            <TextArea\r\n                name='notesTextArea'\r\n                placeholder='Write new note...'\r\n                onChange={event => saveTextAreaValue(event.target.value)}\r\n                value={textAreaValue}\r\n                rows={6}\r\n            />\r\n            <Dropdown overlay={\r\n                <Menu className='emoji-menu' >\r\n                    {\r\n                        emojisArray.map(emoji =>\r\n                            <Menu.Item onClick={() => setMood(emoji)} key={emoji} >\r\n                                <FontAwesomeIcon icon={['far', `${emoji}`]} color='orange' size='3x' />\r\n                            </Menu.Item>\r\n                        )\r\n                    }\r\n                </Menu>\r\n                }\r\n                placement='bottomCenter'\r\n            >\r\n                <a>\r\n                    Choose your mood:) <Icon type='down' />\r\n                </a>\r\n            </Dropdown>\r\n            {\r\n                !!selectedMood &&\r\n                    <FontAwesomeIcon\r\n                        icon={['far', `${selectedMood}`]}\r\n                        color='orange'\r\n                        size='2x'\r\n                        onClick={() => setMood(null)}\r\n                    />\r\n            }\r\n            <List\r\n                itemLayout='horizontal'\r\n                dataSource={actualNotesArray}\r\n                renderItem={(item, idx) => (\r\n                    <List.Item>\r\n                        <List.Item.Meta\r\n                            description={\r\n                                <Row span={24}>\r\n                                    <Col span={3} >\r\n                                        { item.noteMood && <FontAwesomeIcon icon={['far', `${item.noteMood}`]} color='orange' size='3x' /> }\r\n                                    </Col>\r\n                                    <Col span={12} >\r\n                                        <span>{item.noteText}</span>\r\n                                    </Col>\r\n                                    <Col span={6} >\r\n                                        <Button\r\n                                            type='danger'\r\n                                            size='small'\r\n                                            onClick={\r\n                                                () => changeNotesArray(notesArray =>\r\n                                                    notesArray.filter(note =>\r\n                                                        !actualNotesArray.includes(note) || actualNotesArray.indexOf(note) !== idx\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        >\r\n                                            Clear Note\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            }\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n            <Button\r\n                size='large'\r\n                type='primary'\r\n                onClick={() =>\r\n                    {\r\n                        changeNotesArray(notesArray => [\r\n                            ...notesArray, \r\n                            { noteDate: date,\r\n                                noteText: textAreaValue,\r\n                                noteMood: !!selectedMood && selectedMood\r\n                            }]\r\n                        )\r\n                        saveTextAreaValue('')\r\n                    }\r\n                } >\r\n                Create New Note!\r\n            </Button>\r\n            <Button\r\n                size='large'\r\n                type='danger'\r\n                onClick={() =>\r\n                    {\r\n                        saveTextAreaValue('')\r\n                        changeNotesArray(notesArray => notesArray.filter(note => note.noteDate !== date))\r\n                    }\r\n                } >\r\n                Clear All Notes            \r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Notes\r\n","import React, { useContext } from 'react';\r\nimport { Input, Row, Button, List, Col, Dropdown, Icon } from 'antd';\r\n\r\n\r\nexport const createList = ({ listArray, changeNotesArray }) => (\r\n    <List\r\n        itemLayout='horizontal'\r\n        dataSource={listArray}\r\n        renderItem={(item, idx) => (\r\n            <List.Item>\r\n                <List.Item.Meta\r\n                    description={\r\n                        <Row span={24}>\r\n                            <Col span={18} >\r\n                                <span>{item.noteText}</span>\r\n                            </Col>\r\n                            <Col span={6} >\r\n                                <Button\r\n                                    type='danger'\r\n                                    size='small'\r\n                                    onClick={\r\n                                        () => changeNotesArray(array =>\r\n                                            array.filter(note =>\r\n                                                !listArray.includes(note) || listArray.indexOf(note) !== idx\r\n                                            )\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Clear Note\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    }\r\n                />\r\n            </List.Item>\r\n        )}\r\n    />\r\n)\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { Col, Row, Alert, Button } from 'antd';\r\nimport Notes from '../Notes/Notes';\r\nimport moment from 'moment';\r\nimport { DateContext } from '../../contexts/DateContext';\r\nimport './DatePage.css';\r\n\r\nconst DatePage = () => {\r\n\r\n    const date = useContext(DateContext)\r\n    const { selectedDate } = date\r\n    const dateToShow = selectedDate && moment(selectedDate).format('LL')\r\n    const [isHidden, toggleVisibility] = useState(selectedDate ? false : true)\r\n    const classNames = require('classnames')\r\n    const notesClassNames = classNames([(isHidden || !selectedDate) ? 'hidden' : ''])\r\n    const toggleButtonClassNames = classNames([!selectedDate ? 'hidden' : ''])\r\n\r\n    useEffect(\r\n        () => toggleVisibility(false),\r\n        [selectedDate]\r\n    )\r\n\r\n    return (\r\n        <Col span={8} >\r\n            <Row span={24}>\r\n                <Alert \r\n                    message={\r\n                        <>\r\n                        <span>Selected date: {selectedDate ? dateToShow : 'None'}</span>\r\n                        <Button\r\n                            type='ghost'\r\n                            onClick={() => toggleVisibility(isHidden => !isHidden)}\r\n                            size='small'\r\n                            className={toggleButtonClassNames} >\r\n                                {isHidden ? 'Show Notes' : 'Hide Notes'}\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                    type={ selectedDate ? 'success' : 'error' } />\r\n            </Row>\r\n            <Row className={notesClassNames}>\r\n                <Notes date={selectedDate && dateToShow} />\r\n            </Row>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default DatePage\r\n","import React, { useState, useContext } from 'react';\r\nimport Header from 'antd/lib/calendar/Header';\r\nimport { Row, Col, DatePicker, Button, PageHeader } from 'antd';\r\nimport { DateContext } from '../../contexts/DateContext';\r\n\r\nconst DiaryHeader = () => {\r\n    const dateContext = useContext(DateContext)\r\n    const { selectedDate, setDate } = dateContext\r\n\r\n    return (\r\n        <PageHeader>\r\n            <Row span={24} className='row-date-picker'>\r\n                <Col span={12}>\r\n                    <DatePicker \r\n                        onChange={date => {\r\n                            date && setDate(selectedDate => date.toDate())\r\n                        }}\r\n                        size='large'\r\n                        className='date-picker' />\r\n                </Col>\r\n                <Col span={8}>\r\n                    <Button\r\n                    type='danger'\r\n                    size='default'\r\n                    className='clear-date-button'\r\n                    onClick={() => setDate(selectedDate => '')}>Clear Date</Button>\r\n                </Col>\r\n            </Row>\r\n        </PageHeader>\r\n    )\r\n}\r\nexport default DiaryHeader\r\n","import React, { useContext, useEffect } from 'react';\r\nimport './DateList.css';\r\nimport { List, Row } from 'antd';\r\nimport { DateContext } from '../../contexts/DateContext';\r\nimport moment from 'moment';\r\nimport '../DatePanel/DatePanel.css';\r\n\r\nconst DateList = ({ format, listArray, visibility, callback, setPosition, listStyle, position, selectedItem, isChildVisible }) => {\r\n    \r\n    const className = require('classnames')\r\n    const isVisible = !visibility ? 'hidden' : ''\r\n    const listClassName = className(['date-list', isVisible, listStyle])\r\n    const filteredListArray = listArray\r\n        .map(note => moment(note.noteDate).format(format))\r\n        .filter((el, idx, arr) => !arr.slice(idx + 1).includes(el))\r\n\r\n    return (\r\n        <List\r\n            className={listClassName}\r\n            style={{top: position + window.pageYOffset}}\r\n            itemLayout='horizontal'\r\n            dataSource={filteredListArray}\r\n            renderItem={(item) => (\r\n                <List.Item\r\n                    className='date-list-item'\r\n                    onClick={(event) => {\r\n                        callback(item)\r\n                        setPosition(event.target.closest('.date-list-item').getBoundingClientRect().top - 1)\r\n                    }}\r\n                >\r\n                    <List.Item.Meta\r\n                        description={\r\n                            <Row span={24} className='date-list-item-meta'>\r\n                                <span>{item}</span>\r\n                                <span>{ selectedItem === item && isChildVisible ? '<<<' : '>>>' }</span>\r\n                            </Row>\r\n                        }\r\n                    />\r\n                </List.Item>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default DateList\r\n","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport const ListContext = React.createContext({\r\n    isMonthVisible: false,\r\n    toggleMonthVisible: () => {},\r\n    isDaysVisible: false,\r\n    toggleDaysVisible: () => {},\r\n    selectedYear: '',\r\n    setYear: () => {},\r\n    selectedMonth: '',\r\n    setMonth: () => {},\r\n    monthPosition: 0,\r\n    setMonthPosition: () => {},\r\n    daysPosition: 0,\r\n    setDaysPosition: () => {},\r\n})\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { DateContext } from '../../contexts/DateContext'\r\nimport { ListContext } from '../../contexts/ListContext'\r\nimport DateList from '../DateList/DateList'\r\nimport moment from 'moment'\r\nimport './DatePanel.css'\r\n\r\nconst DatePanel = () => {\r\n    const yearsContext = useContext(DateContext)\r\n    const { notesArray, setDate, selectedDate } = yearsContext\r\n    const listContext = useContext(ListContext)\r\n    const {\r\n        isMonthVisible,\r\n        toggleMonthVisible,\r\n        toggleDaysVisible,\r\n        isDaysVisible,\r\n        selectedYear,\r\n        selectedMonth,\r\n        setYear,\r\n        setMonth,\r\n        monthPosition,\r\n        setMonthPosition,\r\n        daysPosition,\r\n        setDaysPosition,\r\n    } = listContext\r\n\r\n    const yearsArray = [...notesArray]\r\n        .sort((note1, note2) => parseFloat(moment(note1.noteDate).format('YYYY')) > parseFloat(moment(note2.noteDate).format('YYYY')) ? 1 : -1)\r\n    const monthArray = [...notesArray]\r\n        .filter(note => moment(note.noteDate).format('YYYY') === selectedYear)\r\n        .sort((note1, note2) => parseFloat(moment(note1.noteDate).format('M')) > parseFloat(moment(note2.noteDate).format('M')) ? 1 : -1)\r\n    const daysArray = [...notesArray]\r\n        .filter(note => moment(note.noteDate).format('YYYY') === selectedYear && moment(note.noteDate).format('MMMM') === selectedMonth)\r\n        .sort((note1, note2) => parseFloat(moment(note1.noteDate).format('D')) > parseFloat(moment(note2.noteDate).format('D')) ? 1 : -1)\r\n\r\n    const yearsToggler = el => {\r\n        setYear(el)\r\n        toggleMonthVisible(el => !el)\r\n        toggleDaysVisible(false)\r\n    }\r\n\r\n    const monthToggler = el => {\r\n        setMonth(el)\r\n        toggleDaysVisible(el => !el)\r\n    }\r\n\r\n    useEffect(() => toggleMonthVisible(true), [selectedYear, selectedMonth])\r\n    useEffect(() => toggleDaysVisible(true), [selectedMonth])\r\n\r\n    return (\r\n        <>\r\n            <DateList\r\n                format='YYYY'\r\n                visibility={notesArray.length > 0}\r\n                listArray={yearsArray}\r\n                callback={yearsToggler}\r\n                setPosition={setMonthPosition}\r\n                position=''\r\n                listStyle='years-list'\r\n                selectedItem={selectedYear}\r\n                isChildVisible={isMonthVisible}\r\n            />\r\n            <DateList\r\n                format='MMMM'\r\n                visibility={monthArray.length && isMonthVisible}\r\n                listArray={monthArray}\r\n                callback={monthToggler}\r\n                setPosition={setDaysPosition}\r\n                position={monthPosition}\r\n                listStyle='month-list'\r\n                selectedItem={selectedMonth}\r\n                isChildVisible={isDaysVisible}\r\n            />\r\n            <DateList\r\n                format='LLL'\r\n                visibility={daysArray.length && isDaysVisible}\r\n                listArray={daysArray}\r\n                callback={setDate}\r\n                setPosition={() => {}}\r\n                position={daysPosition}\r\n                listStyle='days-list'\r\n                selectedItem={selectedDate}\r\n                isChildVisible={false}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DatePanel\r\n","import React, { useState, useEffect } from 'react';\r\nimport { DatePicker, Alert, Row, Col, Button } from 'antd';\r\nimport './FirstPage.css';\r\nimport moment from 'moment';\r\nimport Notes from '../Notes/Notes';\r\nimport DatePage from '../DatePage/DatePage';\r\nimport { DateContext } from '../../contexts/DateContext';\r\nimport DiaryHeader from '../DiaryHeader/DiaryHeader';\r\nimport DateList from '../DateList/DateList';\r\nimport { ListContext } from '../../contexts/ListContext';\r\nimport DatePanel from '../DatePanel/DatePanel';\r\n\r\nconst FirstPage = () => {\r\n\r\n    const currentDate = moment().format('LL')\r\n    const [ selectedDate, setDate ] = useState('')\r\n    const [ currentTime, getCurrentTime] = useState(moment().format('LTS'))\r\n    const [notesArray, changeNotesArray] = useState([])\r\n    const [isMonthVisible, toggleMonthVisible] = useState(false)\r\n    const [isDaysVisible, toggleDaysVisible] = useState(false)\r\n    const [selectedYear, setYear] = useState('')\r\n    const [selectedMonth, setMonth] = useState('')\r\n    const [monthPosition, setMonthPosition] = useState(0)\r\n    const [daysPosition, setDaysPosition] = useState(0)\r\n    const tick = () => {\r\n        getCurrentTime(moment().format('LTS'))\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const time = setInterval(() => tick(), 1000)\r\n        return function cleanTime() {\r\n            clearInterval(time)\r\n        }\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <DateContext.Provider value={{ currentDate, selectedDate, setDate, notesArray, changeNotesArray }}>\r\n            <DiaryHeader />\r\n            <Row span={24}>\r\n                <Col span={4} >\r\n                <ListContext.Provider\r\n                    value={{\r\n                        isMonthVisible,\r\n                        toggleMonthVisible,\r\n                        isDaysVisible,\r\n                        toggleDaysVisible,\r\n                        selectedYear,\r\n                        selectedMonth,\r\n                        setYear,\r\n                        setMonth,\r\n                        monthPosition,\r\n                        setMonthPosition,\r\n                        daysPosition,\r\n                        setDaysPosition\r\n                    }}\r\n                >\r\n                        <DatePanel />\r\n                    </ListContext.Provider>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <Row span={24}>\r\n                        <Alert message={`Current time: ${currentDate}, ${currentTime}`} />\r\n                    </Row>\r\n                    <Row>\r\n                        <Notes date={currentDate} />\r\n                    </Row>\r\n                </Col>\r\n                <DatePage />\r\n            </Row>\r\n        </DateContext.Provider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FirstPage\r\n","import React from 'react';\nimport './App.css';\nimport FirstPage from './components/FirstPage/FirstPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FirstPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}